#!/usr/bin/env bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Show help message
show_help() {
  cat <<EOF
Usage: git-cleanup-branches.sh [OPTIONS]

Deletes local and remote branches that have been merged into the main branch.

Options:
    -f, --force     Skip confirmation prompts
    -r, --remote    Only clean up remote branches
    -l, --local     Only clean up local branches
    -d, --dry-run   Show what would be deleted without actually deleting
    -h, --help      Show this help message

Examples:
    git-cleanup-branches.sh              # Interactive cleanup of both local and remote
    git-cleanup-branches.sh --dry-run    # See what would be deleted
    git-cleanup-branches.sh --force      # Delete without confirmation
    git-cleanup-branches.sh --local      # Only clean local branches
EOF
  exit 0
}

# Initialize variables
FORCE=false
REMOTE_ONLY=false
LOCAL_ONLY=false
DRY_RUN=false
MAIN_BRANCH=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -f|--force)
      FORCE=true
      shift
      ;;
    -r|--remote)
      REMOTE_ONLY=true
      shift
      ;;
    -l|--local)
      LOCAL_ONLY=true
      shift
      ;;
    -d|--dry-run)
      DRY_RUN=true
      shift
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo -e "${RED}Unknown option: $1${NC}"
      show_help
      ;;
  esac
done

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree &> /dev/null; then
  echo -e "${RED}‚ùå This is not a git repository.${NC}"
  exit 1
fi

# Determine the main branch (main or master)
if git show-ref --verify --quiet refs/heads/main; then
  MAIN_BRANCH="main"
elif git show-ref --verify --quiet refs/heads/master; then
  MAIN_BRANCH="master"
else
  echo -e "${RED}‚ùå Could not find main or master branch.${NC}"
  exit 1
fi

echo -e "${BLUE}üîç Using $MAIN_BRANCH as the main branch${NC}"

# Function to get merged local branches
get_merged_local_branches() {
  git branch --merged "$MAIN_BRANCH" | grep -v "^\*" | grep -v "$MAIN_BRANCH" | sed 's/^[[:space:]]*//'
}

# Function to get merged remote branches
get_merged_remote_branches() {
  git branch -r --merged "$MAIN_BRANCH" | grep -v "origin/$MAIN_BRANCH" | sed 's/^[[:space:]]*origin\///'
}

# Function to clean local branches
clean_local_branches() {
  if [ "$LOCAL_ONLY" = true ] || [ "$REMOTE_ONLY" = false ]; then
    echo -e "${BLUE}üìã Checking for merged local branches...${NC}"
    
    local merged_branches=$(get_merged_local_branches)
    
    if [ -z "$merged_branches" ]; then
      echo -e "${GREEN}‚úÖ No merged local branches found.${NC}"
      return
    fi
    
    echo -e "${YELLOW}Found merged local branches:${NC}"
    echo "$merged_branches" | while read -r branch; do
      echo "  - $branch"
    done
    
    if [ "$DRY_RUN" = true ]; then
      echo -e "${BLUE}üîç DRY RUN: Would delete $(echo "$merged_branches" | wc -l | tr -d ' ') local branch(es)${NC}"
      return
    fi
    
    if [ "$FORCE" = false ]; then
      echo -e "${YELLOW}‚ö†Ô∏è  Delete these local branches? (y/N)${NC}"
      read -r response
      if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}‚è≠Ô∏è  Skipping local branch cleanup.${NC}"
        return
      fi
    fi
    
    echo -e "${BLUE}üóëÔ∏è  Deleting merged local branches...${NC}"
    echo "$merged_branches" | while read -r branch; do
      if git branch -d "$branch" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Deleted local branch: $branch${NC}"
      else
        echo -e "${YELLOW}‚ö†Ô∏è  Force deleting local branch: $branch${NC}"
        git branch -D "$branch"
      fi
    done
  fi
}

# Function to clean remote branches
clean_remote_branches() {
  if [ "$REMOTE_ONLY" = true ] || [ "$LOCAL_ONLY" = false ]; then
    echo -e "${BLUE}üìã Checking for merged remote branches...${NC}"
    
    # First, fetch latest changes from remote
    echo -e "${BLUE}üì• Fetching latest changes from remote...${NC}"
    git fetch --prune
    
    local merged_branches=$(get_merged_remote_branches)
    
    if [ -z "$merged_branches" ]; then
      echo -e "${GREEN}‚úÖ No merged remote branches found.${NC}"
      return
    fi
    
    echo -e "${YELLOW}Found merged remote branches:${NC}"
    echo "$merged_branches" | while read -r branch; do
      echo "  - $branch"
    done
    
    if [ "$DRY_RUN" = true ]; then
      echo -e "${BLUE}üîç DRY RUN: Would delete $(echo "$merged_branches" | wc -l | tr -d ' ') remote branch(es)${NC}"
      return
    fi
    
    if [ "$FORCE" = false ]; then
      echo -e "${YELLOW}‚ö†Ô∏è  Delete these remote branches? (y/N)${NC}"
      read -r response
      if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}‚è≠Ô∏è  Skipping remote branch cleanup.${NC}"
        return
      fi
    fi
    
    echo -e "${BLUE}üóëÔ∏è  Deleting merged remote branches...${NC}"
    echo "$merged_branches" | while read -r branch; do
      if git push origin --delete "$branch" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Deleted remote branch: $branch${NC}"
      else
        echo -e "${RED}‚ùå Failed to delete remote branch: $branch${NC}"
      fi
    done
  fi
}

# Main execution
echo -e "${BLUE}üßπ Starting branch cleanup...${NC}"

# Clean local branches
clean_local_branches

# Clean remote branches
clean_remote_branches

echo -e "${GREEN}‚úÖ Branch cleanup completed!${NC}"

# Show remaining branches
echo -e "${BLUE}üìã Remaining branches:${NC}"
echo -e "${YELLOW}Local branches:${NC}"
git branch | sed 's/^/  /'
echo -e "${YELLOW}Remote branches:${NC}"
git branch -r | sed 's/^/  /' 